<?phpuse WUnit\HttpKernel\Client;use WUnit\Http\YiiKernel;use WUnit\Http\YiiExitException;use WUnit\Http\YiiApplication;use Symfony\Component\BrowserKit\Cookie;use Symfony\Component\BrowserKit\CookieJar;class CommonNodeTestHTML extends ShowmallWUnitTestCase{	/** Class Name */	const Node = 'CommonNodeTestHTML';		public $nameClass;	public $tagName;	public $attr;	public $text;		/** use to check all same items in children node */	const Item = 'item';	public $children; // Node is array(0=>Node,...,n=>Node,'item'=>Node)		/**	 * Enter description here ...	 *	 * @param $array(	 * 		'NodeTest' => Node,	 * 		'tagName'  => String,	 * 		'attr'     => Array,	 * 		'text'     => String,	 * 		'children' => Array Node	 * )	 * @return string	 */	public function __construct($array){		$this->nameClass = self::Node;		foreach($array as $key => $val){			if (property_exists($this->nameClass, $key)){				$this->{$key} = $val;			}else{				return 'Format invalid';			}		}		return 'Successful';	}	public function testNode($Node)	{		var_dump($Node);				$this->testAttr($Node);				$this->testText($Node);				$this->testChildren($Node);	}		public function testChildren($Node){		if(is_array($this->children)){						$count = $Node->children()->count();						for($i=0; $i<$count; $i++){								$Node_item = $Node->children()->eq($i);								if(isset($this->children[$i])){					$this->children[$i]->testNode($Node_item);				}				else{					if(isset($this->children[self::Item])){						$this->children[self::Item]->testNode($Node_item);					}				}			}		}	}		public function testAttr($Node){		foreach($this->attr as $key => $val){			$this->assertEquals($Node->attr($key),$val);		}	}		public function testText($Node){		if($this->text != NULL){			$this->assertEquals($Node->text(),$this->text);		}	}}